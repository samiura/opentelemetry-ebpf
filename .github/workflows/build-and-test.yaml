# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

name: build-and-test
run-name: ${{ github.actor }} is running  GitHub Actions
on:
  push:
    branches:
      - main
  pull_request:


env:
  BENV_IMAGE: quay.io/splunko11ytest/network-explorer-debug/benv-final


concurrency:
  group: build-and-test-${{ github.event.pull_request_number || github.ref }}
  cancel-in-progress: true

jobs:
  clang-format-check:
    runs-on: ubuntu-20.04
    name: clang-format-check

    steps:
    - name: Print github workspace
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        echo "pr.ref = ${{github.event.pull_request.head.ref}}"
        echo "github.ref = ${{ github.ref }}"
        echo "$GITHUB_CONTEXT"

    - name: Check out the codebase
      uses: actions/checkout@v3

    - name: Runs format checker
      run: |
        sudo apt update
        sudo apt install -y clang-format-11
        cd ${{ github.workspace }}
        ./.github/workflows/scripts/check-clang-format.sh

  build-reducer:
    name: build-reducer
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build reducer
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC=/root/src \
        --env EBPF_NET_OUT_DIR=/root/out \
        --workdir=/root/out \
        $BENV_IMAGE \
        ../build.sh reducer


  build-kernel-collector:
    name: build-kernel-collector
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build kernel-collector
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC=/root/src \
        --env EBPF_NET_OUT_DIR=/root/out \
        --workdir=/root/out \
        $BENV_IMAGE \
        ../build.sh kernel-collector

  build-k8s-relay:
    name: build-k8s-relay
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build k8s-relay
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC=/root/src \
        --env EBPF_NET_OUT_DIR=/root/out \
        --workdir=/root/out \
        $BENV_IMAGE \
        ../build.sh k8s-relay

  build-cloud-collector:
    name: build-cloud-collector
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build cloud-collector
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC=/root/src \
        --env EBPF_NET_OUT_DIR=/root/out \
        --workdir=/root/out \
        $BENV_IMAGE \
        ../build.sh cloud-collector

  build-k8s-watcher:
    name: build-k8s-watcher
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build k8s-watcher
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC=/root/src \
        --env EBPF_NET_OUT_DIR=/root/out \
        --workdir=/root/out \
        $BENV_IMAGE \
        ../build.sh k8s-watcher

  build-run-unit-tests:
    name: build-run-unit-tests
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: run unit tests
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC=/root/src \
        --env EBPF_NET_OUT_DIR=/root/out-test \
        --workdir=/root/out-test \
        $BENV_IMAGE \
        ../build.sh unit_tests test

  build-run-unit-tests-with-asan-and-debug-flags:
    name: build-run-unit-tests-with-asan-and-debug-flags
    runs-on: ubuntu-20.04
    needs: [clang-format-check]
    steps:
    - name: Check out the codebase
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: build unit tests with asan and debug flags on then run all tests
      run: |
        echo "github.workspace = ${{ github.workspace }}"
        docker pull $BENV_IMAGE
        git submodule update  --init --recursive
        docker run -t \
        --rm \
        --mount "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock" \
        --mount "type=bind,source=$(git rev-parse --show-toplevel),destination=/root/src,readonly" \
        --env EBPF_NET_SRC=/root/src \
        --env EBPF_NET_OUT_DIR=/root/out-test \
        --workdir=/root/out-test \
        $BENV_IMAGE \
        ../build.sh --debug --asan unit_tests test
